{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":1944111,"sourceType":"datasetVersion","datasetId":1159749}],"dockerImageVersionId":30461,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-01-27T07:52:34.828026Z\",\"iopub.execute_input\":\"2024-01-27T07:52:34.828750Z\",\"iopub.status.idle\":\"2024-01-27T07:52:50.695413Z\",\"shell.execute_reply.started\":\"2024-01-27T07:52:34.828710Z\",\"shell.execute_reply\":\"2024-01-27T07:52:50.694445Z\"}}\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n!pip install chess\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\nimport re\nimport numpy as np\nimport chess\nimport pandas as pd\nimport gc\nfrom torch.utils.data import Dataset, DataLoader\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch\nimport pickle\n\n# %% [markdown]\n# \n\n# %% [markdown]\n# ![https://www.hdwallpaper.nu/wp-content/uploads/2017/03/chess-12.jpg](http://)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-01-27T07:52:56.658193Z\",\"iopub.execute_input\":\"2024-01-27T07:52:56.659366Z\",\"iopub.status.idle\":\"2024-01-27T07:52:56.665444Z\",\"shell.execute_reply.started\":\"2024-01-27T07:52:56.659324Z\",\"shell.execute_reply\":\"2024-01-27T07:52:56.664331Z\"}}\nletter_2_num = {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7}\nnum_2_letter = {0: 'a', 1: 'b', 2: 'c', 3: 'd', 4: 'e', 5: 'f', 6: 'g', 7: 'h'}\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n# import chess\n\n# # Create a chess board\n# board = chess.Board()\n\n# # Print the chess board in characters\n# print(board)\n\n# %% [markdown]\n# **2.**\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-01-27T07:53:01.312128Z\",\"iopub.execute_input\":\"2024-01-27T07:53:01.312632Z\",\"iopub.status.idle\":\"2024-01-27T07:53:01.320496Z\",\"shell.execute_reply.started\":\"2024-01-27T07:53:01.312595Z\",\"shell.execute_reply\":\"2024-01-27T07:53:01.319378Z\"}}\n#making chess board layers\ndef create_rep_layer(board, type):\n\n    s = str(board)\n    s = re.sub(f'[^{type}{type.upper()} \\n]', '.', s)   \n    s = re.sub(f'{type}', '-1', s)\n    s = re.sub(f'{type.upper()}', '1', s)\n    s = re.sub(f'\\.', '0', s)\n\n    board_mat = []\n    for row in s.split('\\n'):\n        row = row.split(' ')\n        row = [int(x) for x in row]\n        board_mat.append(row)\n    \n    return np.array(board_mat)\n\n# %% [markdown]\n# **1**\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-01-27T07:53:04.886478Z\",\"iopub.execute_input\":\"2024-01-27T07:53:04.887328Z\",\"iopub.status.idle\":\"2024-01-27T07:53:04.894206Z\",\"shell.execute_reply.started\":\"2024-01-27T07:53:04.887288Z\",\"shell.execute_reply\":\"2024-01-27T07:53:04.892770Z\"}}\ndef board_2_rep(board):\n    pieces = ['p', 'r', 'n', 'b', 'q', 'k']\n    layers = []\n    for piece in pieces:\n        layers.append(create_rep_layer(board, piece))\n    board_rep = np.stack(layers)\n    return board_rep\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-01-27T08:01:38.406596Z\",\"iopub.execute_input\":\"2024-01-27T08:01:38.407506Z\",\"iopub.status.idle\":\"2024-01-27T08:01:38.412257Z\",\"shell.execute_reply.started\":\"2024-01-27T08:01:38.407466Z\",\"shell.execute_reply\":\"2024-01-27T08:01:38.411106Z\"}}\n#converting moves in a list form\ndef create_move_list(s):\n    return re.sub('\\d*\\. ','',s).split(' ')[:-1]\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-01-27T08:01:39.691030Z\",\"iopub.execute_input\":\"2024-01-27T08:01:39.691745Z\",\"iopub.status.idle\":\"2024-01-27T08:01:39.699538Z\",\"shell.execute_reply.started\":\"2024-01-27T08:01:39.691704Z\",\"shell.execute_reply\":\"2024-01-27T08:01:39.698309Z\"}}\n#single move ki representation\ndef move_2_rep(move, board):\n    board.push_san(move).uci()\n    move = str(board.pop())\n\n    from_output_layer = np.zeros((8,8))\n    from_row = 8 - int(move[1])\n    from_column = letter_2_num[move[0]]\n    from_output_layer[from_row, from_column] = 1\n\n    to_output_layer = np.zeros((8,8))\n    to_row = 8 - int(move[3])\n    tow_column = letter_2_num[move[2]]\n    to_output_layer[to_row, tow_column] = 1\n\n    return np.stack([from_output_layer, to_output_layer])\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-01-27T07:53:09.937501Z\",\"iopub.execute_input\":\"2024-01-27T07:53:09.938422Z\",\"iopub.status.idle\":\"2024-01-27T07:54:39.346355Z\",\"shell.execute_reply.started\":\"2024-01-27T07:53:09.938371Z\",\"shell.execute_reply\":\"2024-01-27T07:54:39.345293Z\"}}\nchess_data_raw = pd.read_csv('/kaggle/input/chess-games/chess_games.csv', usecols = ['AN', 'WhiteElo'])\nchess_data = chess_data_raw[chess_data_raw['WhiteElo'] > 2700]\ndel chess_data_raw\ngc.collect\nchess_data = chess_data[['AN']]\nchess_data = chess_data[~chess_data['AN'].str.contains('{')]\nchess_data = chess_data[chess_data['AN'].str.len() > 20]\nprint(chess_data.shape[0])\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-01-27T08:01:06.523327Z\",\"iopub.execute_input\":\"2024-01-27T08:01:06.524142Z\",\"iopub.status.idle\":\"2024-01-27T08:01:06.537004Z\",\"shell.execute_reply.started\":\"2024-01-27T08:01:06.524104Z\",\"shell.execute_reply\":\"2024-01-27T08:01:06.535732Z\"}}\nchess_data.head\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-01-27T08:01:42.489628Z\",\"iopub.execute_input\":\"2024-01-27T08:01:42.490415Z\",\"iopub.status.idle\":\"2024-01-27T08:01:42.500797Z\",\"shell.execute_reply.started\":\"2024-01-27T08:01:42.490370Z\",\"shell.execute_reply\":\"2024-01-27T08:01:42.499606Z\"}}\nclass ChessDataset(Dataset):\n\n    def __init__(self, games):\n        super(ChessDataset, self).__init__()\n        self.games = games\n    \n    def __len__(self):\n        return 2000\n    \n    def __getitem__(self, index):\n        game_i = np.random.randint(self.games.shape[0])     #choosing random index\n        random_game = chess_data['AN'].values[game_i]       # choose game on index\n        moves = create_move_list(random_game)                #creating moves list in that random game\n        game_state_i = np.random.randint(len(moves)-1)       #choosing random instance from that game\n        next_move = moves[game_state_i]                      #that instance will be our target\n        moves = moves[:game_state_i]                          #prevous all moves will be input\n        board = chess.Board()                                #making a chess board (alphabet wala)\n        for move in moves:                                    #saare moves ka board bnana hai ab\n            board.push_san(move)                              #SAN notation me bna diya board ab usko matrix me convert karenge\n        x = board_2_rep(board)\n        y = move_2_rep(next_move, board)\n        if game_state_i % 2 == 1:\n            x*=-1\n\n        return x, y                    # x = board before making the move         # y = jo move kiya hai uska previous position and current position\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-01-27T08:01:44.485309Z\",\"iopub.execute_input\":\"2024-01-27T08:01:44.486066Z\",\"iopub.status.idle\":\"2024-01-27T08:01:44.501209Z\",\"shell.execute_reply.started\":\"2024-01-27T08:01:44.486033Z\",\"shell.execute_reply\":\"2024-01-27T08:01:44.499935Z\"}}\ndata_train = ChessDataset(chess_data['AN'])\ndata_train_loader = DataLoader(data_train, batch_size = 32, shuffle=True, drop_last=True)\nprint(data_train[0])\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-01-27T08:01:47.490322Z\",\"iopub.execute_input\":\"2024-01-27T08:01:47.491147Z\",\"iopub.status.idle\":\"2024-01-27T08:01:47.500765Z\",\"shell.execute_reply.started\":\"2024-01-27T08:01:47.491103Z\",\"shell.execute_reply\":\"2024-01-27T08:01:47.499506Z\"}}\nclass module(nn.Module):\n    \n    def __init__(self, hidden_size):\n        super(module, self).__init__()\n        self.conv1 = nn.Conv2d(hidden_size, hidden_size, 3, stride=1, padding=1)\n        self.conv2 = nn.Conv2d(hidden_size, hidden_size, 3, stride=1, padding=1)\n        self.bn1 = nn.BatchNorm2d(hidden_size)\n        self.bn2 = nn.BatchNorm2d(hidden_size)\n        self.activation1 = nn.SELU()\n        self.activation2 = nn.SELU()\n\n    def forward(self, x):\n        x_input = torch.clone(x)\n        x = self.conv1(x)\n        x = self.bn1(x)\n        x = self.activation1(x)\n        x = self.conv2(x)\n        x = self.bn2(x)\n        x += x_input\n        x = self.activation2(x)\n        return x\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-01-27T08:01:52.057621Z\",\"iopub.execute_input\":\"2024-01-27T08:01:52.058341Z\",\"iopub.status.idle\":\"2024-01-27T08:01:52.067122Z\",\"shell.execute_reply.started\":\"2024-01-27T08:01:52.058306Z\",\"shell.execute_reply\":\"2024-01-27T08:01:52.065968Z\"}}\nclass ChessNet(nn.Module):\n    \n    def __init__(self, hidden_layers=4, hidden_size=200):\n        super(ChessNet, self).__init__()\n        self.hidden_layers = hidden_layers\n        self.input_layer = nn.Conv2d(6, hidden_size, 3, stride=1, padding=1)\n        self.module_list = nn.ModuleList([module(hidden_size) for i in range(hidden_layers)])\n        self.output_layer = nn.Conv2d(hidden_size, 2, 3, stride=1, padding=1)\n\n    def forward(self, x):\n\n        x = self.input_layer(x)\n        x = F.relu(x)\n\n        for i in range(self.hidden_layers):\n            x = self.module_list[i](x)\n\n        x = self.output_layer(x)\n\n        return x\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-01-27T08:01:55.704584Z\",\"iopub.execute_input\":\"2024-01-27T08:01:55.705367Z\",\"iopub.status.idle\":\"2024-01-27T08:01:55.711462Z\",\"shell.execute_reply.started\":\"2024-01-27T08:01:55.705323Z\",\"shell.execute_reply\":\"2024-01-27T08:01:55.710376Z\"}}\ndef checkmate_single(board):\n    board = board.copy()\n    legal_moves = list(board.legal_moves)\n    for move in legal_moves:\n        board.push_uci(str(move))\n        if board.is_checkmate():\n            move = board.pop()\n            return move\n        _ = board.pop()\n    return None\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-01-27T08:01:57.137466Z\",\"iopub.execute_input\":\"2024-01-27T08:01:57.138386Z\",\"iopub.status.idle\":\"2024-01-27T08:01:57.143762Z\",\"shell.execute_reply.started\":\"2024-01-27T08:01:57.138338Z\",\"shell.execute_reply\":\"2024-01-27T08:01:57.142703Z\"}}\ndef distribution_over_moves(vals):\n    probs = np.array(vals)\n    probs = np.exp(probs)\n    probs = probs / probs.sum()\n    probs = probs ** 3\n    probs = probs / probs.sum()\n    return probs\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-01-27T08:01:59.287646Z\",\"iopub.execute_input\":\"2024-01-27T08:01:59.288329Z\",\"iopub.status.idle\":\"2024-01-27T08:01:59.293539Z\",\"shell.execute_reply.started\":\"2024-01-27T08:01:59.288288Z\",\"shell.execute_reply\":\"2024-01-27T08:01:59.292555Z\"}}\ndef predict(x):\n    model.eval()\n    with torch.no_grad():\n        outputs = model(x)\n        return outputs.cpu().numpy()\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n# def choose_move(board,color):\n\n#     legal_moves = list(board.legal_moves)\n\n#     move = checkmate_single(board)   #checking if single move me possible hai check mate\n\n#     if move is not None:   #if yes..kardo\n#         return move\n    \n#     x = torch.Tensor(board_2_rep(board)).float().to('cuda')\n#     if color == chess.BLACK:\n#         x *= -1\n#     x = x.unsqueeze(0)\n#     move = predict(x)\n#     # print(move)\n#     vals = []\n#     froms = [str(legal_move)[:2] for legal_move in legal_moves]\n#     froms = list(set(froms))\n#     for from_ in froms:\n#         # print(move[0,:,:][0][0])\n#         val = move[0,:,:][0][8-int(from_[1]), letter_2_num[from_[0]]]\n#         # print(from_)\n#         vals.append(val)\n    \n#     probs = distribution_over_moves(vals)\n\n#     chosen_from = str(np.random.choice(froms, size=1, p=probs)[0])[:2]\n\n#     vals = []\n#     for legal_move in legal_moves:\n#         from_ = str(legal_move)[:2]\n#         if from_ == chosen_from:\n#             to = str(legal_move)[2:]\n#             # print(move[0,:,:][0])\n#             # print(move[0,:,:][1])\n#             val = move[0,:,:][1][8 - int(to[1]), letter_2_num[to[0]]]\n#             vals.append(val)\n#         else:\n#             vals.append(0)\n#     chosen_move = legal_moves[np.argmax(vals)]\n#     return chosen_move\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-01-27T08:02:02.347266Z\",\"iopub.execute_input\":\"2024-01-27T08:02:02.347648Z\",\"iopub.status.idle\":\"2024-01-27T08:02:02.352679Z\",\"shell.execute_reply.started\":\"2024-01-27T08:02:02.347613Z\",\"shell.execute_reply\":\"2024-01-27T08:02:02.351642Z\"}}\nmetric_from = nn.CrossEntropyLoss()\nmetric_to = nn.CrossEntropyLoss()\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-01-27T08:02:03.875330Z\",\"iopub.execute_input\":\"2024-01-27T08:02:03.876077Z\",\"iopub.status.idle\":\"2024-01-27T08:02:03.952685Z\",\"shell.execute_reply.started\":\"2024-01-27T08:02:03.876035Z\",\"shell.execute_reply\":\"2024-01-27T08:02:03.951529Z\"}}\ntorch.cuda.is_available()           #checking if gpu is available\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-01-27T08:02:06.520863Z\",\"iopub.execute_input\":\"2024-01-27T08:02:06.521757Z\",\"iopub.status.idle\":\"2024-01-27T08:02:46.238133Z\",\"shell.execute_reply.started\":\"2024-01-27T08:02:06.521718Z\",\"shell.execute_reply\":\"2024-01-27T08:02:46.237016Z\"}}\nimport torch.optim as optim\n\nmodel = ChessNet(hidden_layers=4, hidden_size=200).to('cuda')\noptimizer = optim.Adam(model.parameters(), lr=0.0001)\nrecord = []\nnum_epochs = 5\nfor epoch in range(num_epochs):\n    for i, (inputs, labels) in enumerate(data_train_loader):\n        inputs = inputs.float().to('cuda')  \n        labels = labels.float().to('cuda')  # convert labels to float and using gpu\n        optimizer.zero_grad()\n        outputs = model(inputs)\n        output_from = outputs[:, 0, :]\n        output_to = outputs[:, 1, :]\n        y_from = labels[:, 0, :]\n        y_to = labels[:, 1, :]\n        loss_from = nn.CrossEntropyLoss()(output_from, y_from.argmax(dim=1))   #computing loss of choosing move\n        loss_to = nn.CrossEntropyLoss()(output_to, y_to.argmax(dim=1))          #loss for chossing next position\n        loss = loss_from + loss_to\n        loss.backward()                                       # back propagating\n        optimizer.step()\n        record.append(loss.item())\n        if i % 1000 == 0:\n            print('Epoch [{}/{}], Step [{}/{}], Loss: {:.4f}'.format(epoch+1, num_epochs, i+1, len(data_train_loader), loss.item()))\n    torch.save(model, '/kaggle/working/model2.pth')\n    with open('path_to_save_model.pkl', 'wb') as file:\n        pickle.dump(model, file)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-01-27T08:02:56.663697Z\",\"iopub.execute_input\":\"2024-01-27T08:02:56.664828Z\",\"iopub.status.idle\":\"2024-01-27T08:02:56.688249Z\",\"shell.execute_reply.started\":\"2024-01-27T08:02:56.664781Z\",\"shell.execute_reply\":\"2024-01-27T08:02:56.687194Z\"}}\nmodel1 = torch.load('model2.pth')\nmodel = model1\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-01-27T08:02:58.716116Z\",\"iopub.execute_input\":\"2024-01-27T08:02:58.716819Z\",\"iopub.status.idle\":\"2024-01-27T08:03:10.627740Z\",\"shell.execute_reply.started\":\"2024-01-27T08:02:58.716781Z\",\"shell.execute_reply\":\"2024-01-27T08:03:10.626574Z\"}}\n!pip install chess\nimport chess\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\ndef return_mat(board):\n    notation_mapping = {   #standard to sidhu notation\n        'r': 'b-rook',\n        'n': 'b-knight',\n        'b': 'b-bishop',\n        'q': 'b-queen',\n        'k': 'b-king',\n        'p': 'b-pawn',\n        'R': 'w-rook',\n        'N': 'w-knight',\n        'B': 'w-bishop',\n        'Q': 'w-queen',\n        'K': 'w-king',\n        'P': 'w-pawn',\n        '.': None\n    }\n    board_str = str(board)\n    # Replace the standard notation with custom notation\n    new_board_chars = []\n    for char in board_str:\n        if char in notation_mapping:\n            new_board_chars.append(str(notation_mapping[char]))\n        else:\n            new_board_chars.append(char)\n\n    # Join the modified characters to form the new board string\n    new_board_str = ' '.join(new_board_chars)\n\n    # Print the modified board string\n    return new_board_str\n\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-01-27T08:28:38.064062Z\",\"iopub.execute_input\":\"2024-01-27T08:28:38.064869Z\",\"iopub.status.idle\":\"2024-01-27T08:28:38.077030Z\",\"shell.execute_reply.started\":\"2024-01-27T08:28:38.064826Z\",\"shell.execute_reply\":\"2024-01-27T08:28:38.075905Z\"}}\ndef input_board(board_str):\n    # Convert the board string to a 2D list\n    board = [row.split() for row in board_str.split('\\n')]\n\n    reverse_notation_mapping = {\n        'b-rook': 'r',\n        'b-knight': 'n',\n        'b-bishop': 'b',\n        'b-queen': 'q',\n        'b-king': 'k',\n        'b-pawn': 'p',\n        'w-rook': 'R',\n        'w-knight': 'N',\n        'w-bishop': 'B',\n        'w-queen': 'Q',\n        'w-king': 'K',\n        'w-pawn': 'P',\n        'None': '.'\n    }\n\n    # Convert custom notation to standard notation\n    for i in range(8):\n        for j in range(8):\n            board[i][j] = reverse_notation_mapping[board[i][j]]\n\n    # Convert the 2D list to a FEN string\n    fen = ''\n    for row in board:  # 8th row to 1st row\n        empty_count = 0\n        for square in row:  # 'a' to 'h'\n            if square == '.':  # Empty square\n                empty_count += 1\n            else:  # Square is occupied by a piece\n                if empty_count > 0:\n                    fen += str(empty_count)\n                    empty_count = 0\n                fen += square\n        if empty_count > 0:\n            fen += str(empty_count)\n        fen += '/'\n    fen = fen[:-1]  # Remove the trailing '/'\n\n    # Create a chess.Board object\n    board = chess.Board(fen)\n    return board\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-01-27T08:36:57.802278Z\",\"iopub.execute_input\":\"2024-01-27T08:36:57.803429Z\",\"iopub.status.idle\":\"2024-01-27T08:36:57.810236Z\",\"shell.execute_reply.started\":\"2024-01-27T08:36:57.803376Z\",\"shell.execute_reply\":\"2024-01-27T08:36:57.808948Z\"}}\nboard = chess.Board()\nprint(board)\nbr = return_mat(board)\nprint(br)\nbrr = input_board(br)\nprint(brr)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-01-27T08:42:38.681661Z\",\"iopub.execute_input\":\"2024-01-27T08:42:38.682772Z\",\"iopub.status.idle\":\"2024-01-27T08:42:38.697543Z\",\"shell.execute_reply.started\":\"2024-01-27T08:42:38.682714Z\",\"shell.execute_reply\":\"2024-01-27T08:42:38.696431Z\"}}\ndef choose_move(board,color):\n    board = input_board(board)   #ye aalg hai\n\n    legal_moves = list(board.legal_moves)\n\n    move = checkmate_single(board)   #checking if single move me possible hai check mate\n\n    if move is not None:   #if yes..kardo\n        return move\n    \n    x = torch.Tensor(board_2_rep(board)).float().to('cuda')\n    if color == chess.BLACK:\n        x *= -1\n    x = x.unsqueeze(0)\n    move = predict(x)\n    # print(move)\n    vals = []\n    froms = [str(legal_move)[:2] for legal_move in legal_moves]\n    froms = list(set(froms))\n    for from_ in froms:\n        # print(move[0,:,:][0][0])\n        val = move[0,:,:][0][8-int(from_[1]), letter_2_num[from_[0]]]\n        # print(from_)\n        vals.append(val)\n    \n    probs = distribution_over_moves(vals)\n\n    chosen_from = str(np.random.choice(froms, size=1, p=probs)[0])[:2]\n\n    vals = []\n    for legal_move in legal_moves:\n        from_ = str(legal_move)[:2]\n        if from_ == chosen_from:\n            to = str(legal_move)[2:]\n            # print(move[0,:,:][0])\n            # print(move[0,:,:][1])\n            val = move[0,:,:][1][8 - int(to[1]), letter_2_num[to[0]]]\n            vals.append(val)\n        else:\n            vals.append(0)\n    chosen_move = legal_moves[np.argmax(vals)]\n    # Create a new chess board\n    board = chess.Board()\n\n# Push a move to the board\n    board.push_uci(chosen_move.uci())\n#     board.push_uci(chosen_move)\n    b_mat = return_mat(board)\n    return b_mat\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-01-27T08:42:40.190565Z\",\"iopub.execute_input\":\"2024-01-27T08:42:40.190955Z\",\"iopub.status.idle\":\"2024-01-27T08:42:40.204970Z\",\"shell.execute_reply.started\":\"2024-01-27T08:42:40.190919Z\",\"shell.execute_reply\":\"2024-01-27T08:42:40.203517Z\"}}\nb_mat = choose_move(br, chess.BLACK)\nprint(b_mat)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n","metadata":{"_uuid":"7be24967-1fb5-4467-bfc4-02babe497193","_cell_guid":"5e4fb80d-f270-4c24-a011-e371ddc83cd5","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}